import React, { useEffect, useState } from "react";
import axios from "axios";
import Swal from "sweetalert2";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/DeleteOutlined";
import { GridActionsCellItem } from "@mui/x-data-grid-pro";
import { Button, Card, Slide, Stack } from "@mui/material";
import LinearProgress from "@mui/material/LinearProgress";
import { DataGrid } from "@mui/x-data-grid";
import UserFormModal from "../UserFormShow/UserFormModal";
import { useDispatch, useSelector } from "react-redux";
import {
  addUser,
  deleteUser,
  updateUser,
  setUsers,
} from "../../Redux/Reducers/userReducer";

const Transition = React.forwardRef(function Transition(props, ref) {
  return <Slide direction="up" ref={ref} {...props} />;
});

export default function ShowDataMain() {
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [rows, setRows] = useState([]);
  const [editRow, seteditRew] = useState(null);

  const handleClose = () => {
    setOpen(false);
    seteditRew(null);
  };

  const columns = [
    { field: "_id", headerName: "ID", width: 180 },
    { field: "name", headerName: "Name", width: 180 },
    { field: "email", headerName: "Email", width: 180 },
    { field: "password", headerName: "Password", width: 250 },
    {
      field: "actions",
      type: "actions",
      headerName: "Actions",
      width: 100,
      cellClassName: "actions",
      getActions: (data) => {
        return [
          <GridActionsCellItem
            icon={<EditIcon />}
            label="Edit"
            onClick={() => handleEditClick(data)}
            color="inherit"
          />,
          <GridActionsCellItem
            icon={<DeleteIcon />}
            label="Delete"
            onClick={() => handleDeleteClick(data)}
            color="inherit"
          />,
        ];
      },
    },
  ];

  const handleEditClick = (data) => {
    seteditRew(data);
    setOpen(true);
  };

  const handleSubmit = (userUpdatedData) => {
    if (editRow) {
      axios
        .put(
          `https://65c7118fe7c384aada6e2870.mockapi.io/mydata/mydata/${editRow.row._id}`,
          userUpdatedData
        )
        .then(() => {
          mydata();
          handleClose();
        });
    } else {
      axios
        .post(
          "https://65c7118fe7c384aada6e2870.mockapi.io/mydata/mydata",
          userUpdatedData
        )
        .then((e) => {
          mydata();
          handleClose();
        });
    }
  };
  const handleDeleteClick = (data) => {
    Swal.fire({
      title: "Do you want to Delete?",
      showCancelButton: true,
      confirmButtonText: "Delete",
    }).then((result) => {
      if (result.isConfirmed) {
        axios
          .delete(
            `https://65c7118fe7c384aada6e2870.mockapi.io/mydata/mydata/${data.row._id}`
          )
          .then((r) => {
            mydata();
            alert("del");
          })
          .catch((error) => {
            console.error("Error deleting data:", error);
          });
      }
    });
  };

  let mydata = () => {
    setLoading(true);
    axios
      .get("https://65c7118fe7c384aada6e2870.mockapi.io/mydata/mydata")
      .then((r) => {
        let d = r.data.map((val, index) => {
          val.id = index + 1;
          return val;
        });
        setRows(d);
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error fetching data:", error);
        setLoading(false);
      });
  };

  useEffect(() => {
    mydata();
  }, []);

  function CustomLoadingOverlay() {
    return loading ? <LinearProgress /> : null;
  }

  return (
    <>
      <Stack direction="row" alignItems="center" justifyContent="end" m={5}>
        <Button
          variant="contained"
          onClick={() => {
            setOpen(true);
          }}
        >
          New User
        </Button>
      </Stack>
      {loading ? (
        <div
          style={{
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            height: "100vh",
          }}
        >
          <img src="/loader.gif" alt="" />
        </div>
      ) : (
        <div style={{ margin: "auto", width: "80%", marginTop: "50px" }}>
          <Card
            style={{ height: 500, width: "100%", backgroundColor: "#ffffff" }}
            sx={{ boxShadow: 3, borderRadius: "16px" }}
          >
            <DataGrid
              rows={rows}
              columns={columns}
              pageSize={5}
              rowsPerPageOptions={[10]}
              loading={loading}
              components={{
                LoadingOverlay: CustomLoadingOverlay,
              }}
            />
          </Card>
        </div>
      )}
      {open && (
        <UserFormModal
          open={open}
          handleClose={handleClose}
          TransitionComponent={Transition}
          userData={editRow}
          mydata={() => mydata()}
          handleUpdateData={handleSubmit}
        />
      )}
    </>
  );
}



import styled from "@emotion/styled";
import {
  Button,
  Dialog,
  DialogContent,
  DialogTitle,
  Grid,
  IconButton,
  InputAdornment,
  Slide,
} from "@mui/material";
import React, { useEffect, useState } from "react";
import { TextValidator, ValidatorForm } from "react-material-ui-form-validator";
import VisibilityIcon from "@mui/icons-material/Visibility";
import VisibilityOffIcon from "@mui/icons-material/VisibilityOff";
import SendIcon from "@mui/icons-material/Send";
import DeleteIcon from "@mui/icons-material/Delete";
import { useDispatch } from "react-redux";
import { updateUser, addUser } from "../../Redux/Reducers/userReducer";

const Transition = React.forwardRef(function Transition(props, ref) {
  return <Slide direction="up" ref={ref} {...props} />;
});
const TextValidatorField = styled(TextValidator)(() => ({
  width: "100%",
  marginBottom: "16px",
}));

ValidatorForm.addValidationRule("namevalidationsrule", (value) => {
  return /^[a-zA-Z\s]*$/.test(value);
});

ValidatorForm.addValidationRule("emailvalidationsrule", (value) => {
  return /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/.test(value);
});

function UserFormModal({ open, handleClose, userData, handleUpdateData }) {
  const [showPassword, setShowPassword] = useState(false);
  const [data, setdata] = useState({
    name: "",
    email: "",
    password: "",
  });


  const handleChange = (e) => {
    e.persist();
    setdata({ ...data, [e.target.name]: e.target.value });
  };

//   const handleSubmit = (e) => {
//     e.preventDefault();
//     if (userData) {
//       dispatch(updateUser({ _id: userData.row._id, ...data }));
//     } else {
//       dispatch(addUser(data));
//     }
//     handleUpdateData(data);
//   };

  useEffect(() => {
    if (userData) {
      setdata({
        ...data,
        name: userData.row.name,
        email: userData.row.email,
        password: userData.row.password,
      });
    }
  }, [userData]);

  return (
    <Dialog
      open={open}
      TransitionComponent={Transition}
      keepMounted
      fullWidth
      maxWidth="sm"
      onClose={handleClose}
      aria-describedby="alert-dialog-slide-description"
    >
      {/* New User */}
      <DialogTitle>{userData ? "Edit User" : "New User"}</DialogTitle>
      <DialogContent>
        <ValidatorForm
          onSubmit={handleSubmit}
          onError={() => null}
          autoComplete="off"
        >
          <Grid container spacing={8}>
            <Grid item lg={12} md={12} sm={12} xs={12} sx={{ mt: 2 }}>
              <TextValidatorField
                type="text"
                name="name"
                id="standard-basic"
                value={data.name || ""}
                onChange={handleChange}
                validators={[
                  "required",
                  "minStringLength:3",
                  "maxStringLength:50",
                  "namevalidationsrule",
                ]}
                errorMessages={[
                  "this field is required",
                  "minimum length is 3",
                  "maximum length is 50",
                  "name is not use to number and special characters",
                ]}
                label=" Name "
              />
              <TextValidatorField
                type="email"
                name="email"
                id="standard-basic"
                value={data.email || ""}
                onChange={handleChange}
                validators={[
                  "required",
                  "isEmail",
                  "minStringLength:5",
                  "maxStringLength:50",
                  "emailvalidationsrule",
                ]}
                errorMessages={[
                  "this field is required",
                  "email is not valid",
                  "minimum length is 5",
                  "maximum length is 50",
                  "email is not use to special characters",
                ]}
                label="email"
              />

              <TextValidatorField
                name="password"
                label="Password"
                value={data.password || ""}
                onChange={handleChange}
                validators={["required", "minStringLength: 8"]}
                errorMessages={[
                  "This field is required",
                  "Password must be at least 8 characters long",
                ]}
                type={showPassword ? "text" : "password"}
                InputProps={{
                  endAdornment: (
                    <InputAdornment position="end">
                      <IconButton
                        onClick={() => setShowPassword(!showPassword)}
                        edge="end"
                      >
                        {showPassword ? (
                          <VisibilityIcon />
                        ) : (
                          <VisibilityOffIcon />
                        )}
                      </IconButton>
                    </InputAdornment>
                  ),
                }}
              />
            </Grid>
          </Grid>

          <div className="container">
            <div className="row">
              <div className="col-sm-6 mb-2">
                <Button
                  color="error"
                  variant="contained"
                  type="button"
                  fullWidth
                  onClick={() => {
                    setdata("");
                  }}
                >
                  <DeleteIcon />
                  <span> Clear</span>
                </Button>
              </div>
              <div className="col-sm-6 mb-2">
                <Button
                  color="primary"
                  variant="contained"
                  type="submit"
                  fullWidth
                >
                  <SendIcon />
                  <span>{userData ? "Update Item" : "Add Item"}</span>
                </Button>
              </div>
            </div>
          </div>
        </ValidatorForm>
      </DialogContent>
    </Dialog>
  );
}

export default UserFormModal;
